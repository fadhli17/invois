import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import toast from 'react-hot-toast';
import { formatCurrency, formatDate } from '../utils/helpers';
import { API_BASE_URL } from '../config/api';

const InvoiceView = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [invoice, setInvoice] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showLogoModal, setShowLogoModal] = useState(false);
  const [settings, setSettings] = useState({
    companyLogo: '',
    showCompanyLogo: true
  });
  const [itemsMode, setItemsMode] = useState('structured'); // 'structured' or 'freeform'

  useEffect(() => {
    fetchInvoice();
  }, [id]);

  // Load settings from localStorage
  useEffect(() => {
    try {
      const raw = localStorage.getItem('app_settings');
      if (raw) {
        const s = JSON.parse(raw);
        setSettings({
          companyLogo: s.companyLogo || '',
          showCompanyLogo: s.showCompanyLogo !== undefined ? s.showCompanyLogo : true
        });
      }
    } catch (e) {
      // ignore malformed settings
    }
  }, []);

  // Load logo from server
  useEffect(() => {
    const loadLogoFromServer = async () => {
      try {
        const response = await axios.get('/api/logos/current');
        if (response.data.logo) {
          const logoUrl = `${API_BASE_URL}${response.data.logo.url}`;
          setSettings(prev => ({
            ...prev,
            companyLogo: logoUrl
          }));
        }
      } catch (error) {
        console.log('No logo found on server or error loading:', error.message);
      }
    };

    loadLogoFromServer();
  }, []);

  useEffect(() => {
    const handleEscape = (e) => {
      if (e.key === 'Escape') {
        setShowLogoModal(false);
      }
    };

    if (showLogoModal) {
      document.addEventListener('keydown', handleEscape);
      return () => document.removeEventListener('keydown', handleEscape);
    }
  }, [showLogoModal]);

  const fetchInvoice = async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/api/invoices/${id}`);
      const invoiceData = response.data;
      setInvoice(invoiceData);
      
      // Detect items mode based on data
      const hasFreeformContent = invoiceData.freeformItems && invoiceData.freeformItems.trim() !== '';
      const hasStructuredContent = invoiceData.items && invoiceData.items.length > 0 && 
        invoiceData.items.some(item => item.description && item.description.trim() !== '');
      
      // Check if structured items look like they were auto-generated from freeform
      const structuredItemsLookAutoGenerated = hasStructuredContent && hasFreeformContent && 
        invoiceData.items.filter(item => parseFloat(item.unitPrice) === 0).length > invoiceData.items.length * 0.5;
      
      console.log('InvoiceView - Mode detection:', {
        hasFreeformContent,
        hasStructuredContent,
        structuredItemsLookAutoGenerated,
        freeformItems: invoiceData.freeformItems,
        itemsCount: invoiceData.items ? invoiceData.items.length : 0
      });
      
      if (hasFreeformContent && (!hasStructuredContent || structuredItemsLookAutoGenerated)) {
        console.log('InvoiceView - Detected freeform mode');
        setItemsMode('freeform');
      } else if (hasStructuredContent && !hasFreeformContent) {
        console.log('InvoiceView - Detected structured mode');
        setItemsMode('structured');
      } else {
        console.log('InvoiceView - Defaulting to structured mode');
        setItemsMode('structured');
      }
    } catch (error) {
      console.error('Error fetching invoice:', error);
      toast.error('Gagal memuat invois');
      navigate('/invoices');
    } finally {
      setLoading(false);
    }
  };

  const getTotalPaid = (inv) => {
    if (!inv) return 0;
    if (Array.isArray(inv.payments) && inv.payments.length > 0) {
      return inv.payments.reduce((s, p) => s + (parseFloat(p.amount) || 0), 0);
    }
    return parseFloat(inv.amountPaid) || 0;
  };

  const getSubtotal = (inv) => {
    if (!inv) return 0;
    return parseFloat(inv.subtotal) || 0;
  };

  const getDiscountAmount = (inv) => {
    if (!inv) return 0;
    return parseFloat(inv.discount) || 0;
  };

  const getTaxAmount = (inv) => {
    if (!inv) return 0;
    return parseFloat(inv.tax) || 0;
  };

  const getTotal = (inv) => {
    if (!inv) return 0;
    return parseFloat(inv.total) || 0;
  };

  const getOutstanding = (inv) => {
    if (!inv) return 0;
    const total = getTotal(inv);
    const paid = getTotalPaid(inv);
    return Math.max(0, total - paid);
  };

  const createPrintContent = (invoice, logoUrl, totalPaid, outstanding, itemsMode) => {
    return `
      <!DOCTYPE html>
      <html>
        <head>
          <title>${invoice.documentType === 'quote' ? 'SEBUT HARGA' : 'INVOIS'} - ${invoice.invoiceNumber}</title>
          <style>
            @page { size: A4; margin: 14mm; }
            @media print {
              body { -webkit-print-color-adjust: exact; print-color-adjust: exact; }
              .no-print { display: none !important; }
              .paper { box-shadow: none !important; margin: 0 !important; }
              thead { display: table-header-group; }
              tfoot { display: table-footer-group; }
            }
            .paper { width: 210mm; min-height: 297mm; margin: 10mm auto; }
            .h-rule { border-color: #e5e7eb; }
              .print-logo { max-height: 20mm; max-width: 40mm; width: auto; height: auto; object-fit: contain; }
            .print-qr { width: 50mm; height: 80mm; object-fit: contain; }
            body { font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif; margin: 0; padding: 0; }
            .container { max-width: 5xl; margin: 0 auto; padding: 2rem; }
            .flex { display: flex; }
            .justify-between { justify-content: space-between; }
            .items-start { align-items: flex-start; }
            .gap-4 { gap: 1rem; }
            .text-2xl { font-size: 1.5rem; line-height: 2rem; }
            .font-bold { font-weight: 700; }
            .text-sm { font-size: 0.875rem; line-height: 1.25rem; }
            .text-gray-600 { color: #4b5563; }
            .mt-1 { margin-top: 0.25rem; }
            .mt-8 { margin-top: 2rem; }
            .grid { display: grid; }
            .grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
            .gap-6 { gap: 1.5rem; }
            .font-semibold { font-weight: 600; }
            .mb-2 { margin-bottom: 0.5rem; }
            .text-gray-700 { color: #374151; }
            .whitespace-pre-wrap { white-space: pre-wrap; }
            table { width: 100%; border-collapse: collapse; }
            .bg-gray-100 { background-color: #f3f4f6; }
            .text-left { text-align: left; }
            .p-3 { padding: 0.75rem; }
            .w-20 { width: 5rem; }
            .text-center { text-align: center; }
            .w-28 { width: 7rem; }
            .text-right { text-align: right; }
            .w-32 { width: 8rem; }
            .border-b { border-bottom-width: 1px; }
            .border-gray-200 { border-color: #e5e7eb; }
            .mt-6 { margin-top: 1.5rem; }
            .bg-gray-50 { background-color: #f9fafb; }
            .p-4 { padding: 1rem; }
            .text-base { font-size: 1rem; line-height: 1.5rem; }
            .text-blue-700 { color: #1d4ed8; }
            .text-orange-600 { color: #ea580c; }
            .text-green-700 { color: #15803d; }
            .text-purple-600 { color: #9333ea; }
            .text-red-600 { color: #dc2626; }
            .mt-2 { margin-top: 0.5rem; }
            .text-xs { font-size: 0.75rem; line-height: 1rem; }
            .text-gray-500 { color: #6b7280; }
            .space-y-1 > * + * { margin-top: 0.25rem; }
            .border-t { border-top-width: 1px; }
            .pt-1 { padding-top: 0.25rem; }
            .font-medium { font-weight: 500; }
            .text-gray-900 { color: #111827; }
            .text-lg { font-size: 1.125rem; line-height: 1.75rem; }
          </style>
        </head>
        <body class="bg-white text-gray-900">
          <div class="paper bg-white shadow print:shadow-none">
            <div class="container">
              <!-- Header -->
              <div class="flex justify-between items-start">
                <div class="flex items-start gap-4">
                  ${logoUrl ? `<img src="${logoUrl}" alt="Logo" class="print-logo" />` : ''}
                  <div>
                    <div class="text-2xl font-bold">
                      ${invoice.documentType === 'quote' ? 'SEBUT HARGA' : 'INVOIS'}
                    </div>
                    <div class="text-sm text-gray-600 mt-1">
                      <div>No. ${invoice.documentType === 'quote' ? 'Sebut Harga' : 'Invois'}: ${invoice.invoiceNumber}</div>
                      <div>Tarikh Terbit: ${formatDate(invoice.issueDate)}</div>
                      <div>Tarikh Jatuh Tempo: ${formatDate(invoice.dueDate)}</div>
                    </div>
                  </div>
                </div>
                <div class="text-right">
                  <div class="text-xs text-gray-500">No. ${invoice.documentType === 'quote' ? 'Sebut Harga' : 'Invois'}</div>
                  <div class="text-lg font-semibold">${invoice.invoiceNumber}</div>
                </div>
              </div>

              <!-- Parties -->
              <div class="grid grid-cols-2 gap-6 mt-8">
                <div>
                  <div class="text-sm font-semibold mb-2">Dari</div>
                  <div class="text-sm">
                    <div class="font-semibold">${invoice.senderCompanyName}</div>
                    <div class="text-gray-700 whitespace-pre-wrap">${invoice.senderCompanyAddress}</div>
                    <div class="mt-1">${invoice.senderCompanyEmail}</div>
                    ${invoice.senderCompanyPhone ? `<div>${invoice.senderCompanyPhone}</div>` : ''}
                    ${invoice.senderCompanyRegistrationNo ? `<div>No. Pendaftaran: ${invoice.senderCompanyRegistrationNo}</div>` : ''}
                  </div>
                </div>
                <div>
                  <div class="text-sm font-semibold mb-2">Kepada</div>
                  <div class="text-sm">
                    ${invoice.clientCompany ? `<div class="font-semibold">${invoice.clientCompany}</div>` : ''}
                    <div class="font-medium">${invoice.clientName}</div>
                    <div class="mt-1">${invoice.clientEmail}</div>
                    <div class="text-gray-700 whitespace-pre-wrap">${invoice.clientAddress}</div>
                    ${invoice.clientPhone ? `<div>${invoice.clientPhone}</div>` : ''}
                  </div>
                </div>
              </div>

              <!-- Items -->
              <div class="mt-8">
                ${itemsMode === 'structured' ? `
                  <table class="w-full text-sm border-collapse">
                       <thead>
                         <tr class="bg-gray-100">
                           <th class="text-center p-3 w-12">No.</th>
                           <th class="text-left p-3">Item</th>
                           <th class="text-center p-3 w-20">Qty</th>
                           <th class="text-right p-3 w-28">Unit (RM)</th>
                           <th class="text-right p-3 w-32">Jumlah (RM)</th>
                         </tr>
                       </thead>
                    <tbody>
                      ${invoice.items.map((it, i) => `
                        <tr class="border-b">
                          <td class="p-3 text-center font-medium">${i + 1}</td>
                          <td class="p-3">${it.description}</td>
                          <td class="p-3 text-center">${it.quantity}</td>
                          <td class="p-3 text-right">${formatCurrency(it.unitPrice)}</td>
                          <td class="p-3 text-right font-semibold">${formatCurrency(it.quantity * it.unitPrice)}</td>
                        </tr>
                      `).join('')}
                    </tbody>
                  </table>
                ` : `
                  <div class="border border-gray-200 rounded-lg p-4 bg-gray-50">
                    <div class="mb-3 pb-2 border-b border-gray-300">
                      <h4 class="text-sm font-semibold text-gray-900 flex items-center gap-2">
                        
                        Senarai Item
                      </h4>
                    </div>
                    <div class="text-sm whitespace-pre-wrap">${invoice.freeformItems}</div>
                    <div class="mt-3 pt-3 border-t border-gray-300">
                      <div class="text-xs text-gray-500 flex items-center gap-1">
                
                        Item ini dibuat dalam mod teks bebas
                      </div>
                    </div>
                  </div>
                `}
              </div>

              <!-- Totals & Payment -->
              <div class="grid grid-cols-2 gap-6 mt-6">
                <div class="text-sm">
                  ${invoice.documentType !== 'quote' && (invoice.senderBankName || invoice.senderBankAccount || invoice.paymentQRCode) ? `
                    <div>
                      <div class="font-semibold mb-2">Maklumat Pembayaran</div>
                      ${invoice.senderBankName ? `<div>Bank: ${invoice.senderBankName}</div>` : ''}
                      ${invoice.senderBankAccount ? `<div>Akaun: ${invoice.senderBankAccount}</div>` : ''}
                      ${invoice.paymentQRCode ? `
                        <div class="mt-2">
                          <div class="mb-1">Kod QR Pembayaran:</div>
                          <img src="${API_BASE_URL}${invoice.paymentQRCode}" alt="QR" class="print-qr" />
                        </div>
                      ` : ''}
                    </div>
                  ` : ''}
                </div>
                <div>
                  <div class="bg-gray-50 p-4 text-sm">
                    <div class="flex justify-between text-blue-700">
                      <span>Subtotal</span>
                      <span class="font-semibold">${formatCurrency(invoice.subtotal)}</span>
                    </div>
                    ${invoice.discount > 0 ? `
                      <div class="flex justify-between mt-1 text-red-600">
                        <span>Diskaun</span>
                        <span class="font-semibold">-${formatCurrency(invoice.discount)}</span>
                      </div>
                    ` : ''}
                    ${invoice.tax > 0 ? `
                      <div class="flex justify-between mt-1 text-orange-600">
                        <span>Cukai</span>
                        <span class="font-semibold">${formatCurrency(invoice.tax)}</span>
                      </div>
                    ` : ''}
                    <div class="flex justify-between mt-2 text-base text-green-700">
                      <span class="font-semibold">Jumlah</span>
                      <span class="font-bold">${formatCurrency(invoice.total)}</span>
                    </div>
                    ${invoice.documentType !== 'quote' ? `
                      <div class="flex justify-between mt-2 text-purple-600">
                        <span>Bayaran Diterima</span>
                        <span class="font-semibold">${formatCurrency(totalPaid)}</span>
                      </div>
                      ${invoice.payments && invoice.payments.length > 0 ? `
                        <div class="flex justify-between text-xs text-gray-500 mt-1">
                          <span>Pembayaran Terakhir:</span>
                          <span>${formatDate(invoice.payments[invoice.payments.length - 1].date)}</span>
                        </div>
                      ` : ''}
                      ${outstanding > 0 ? `
                        <div class="flex justify-between text-red-600">
                          <span>Baki Tertunggak</span>
                          <span class="font-semibold">${formatCurrency(outstanding)}</span>
                        </div>
                      ` : ''}
                    ` : ''}
                  </div>
                </div>
              </div>

              <!-- Payment Records - Simple for customer reference -->
              ${invoice.documentType !== 'quote' && invoice.payments && invoice.payments.length > 0 ? `
                <div class="mt-6 text-sm">
                  <div class="font-semibold mb-2">Rekod Pembayaran:</div>
                  <div class="space-y-1">
                    ${invoice.payments.map((payment, index) => `
                      <div class="flex justify-between items-center text-xs">
                        <span class="text-gray-600">
                          ${formatDate(payment.date)} - ${payment.note || 'Pembayaran'}
                        </span>
                        <span class="font-semibold text-gray-900">${formatCurrency(payment.amount)}</span>
                      </div>
                    `).join('')}
                    <div class="border-t border-gray-200 pt-1 mt-2">
                      <div class="flex justify-between items-center text-xs font-semibold">
                        <span>Jumlah Pembayaran:</span>
                        <span class="text-green-600">${formatCurrency(totalPaid)}</span>
                      </div>
                    </div>
                  </div>
                </div>
              ` : ''}

              <!-- Notes & Terms -->
                ${invoice.termsAndConditions ? `
                <div class="mt-6 text-sm">
                  <div class="font-semibold mb-1">Terma dan Syarat</div>
                  <div class="whitespace-pre-wrap text-gray-700">${invoice.termsAndConditions}</div>
                </div>
              ` : ''}
              ${invoice.notes ? `
                <div class="mt-6 text-sm">
                  <div class="font-semibold mb-1">Nota</div>
                  <div class="whitespace-pre-wrap text-gray-700">${invoice.notes}</div>
                </div>
              ` : ''}
            
            </div>
          </div>
        </body>
      </html>
    `;
  };

  const handlePrint = () => {
    // Create a new window for printing
    const printWindow = window.open('', '_blank');
    
    // Get the invoice data and create print content
    const logoUrl = invoice.companyLogo
      ? (invoice.companyLogo.startsWith('data:') ? invoice.companyLogo : `${API_BASE_URL}${invoice.companyLogo}`)
      : '';

    const totalPaid = getTotalPaid(invoice);
    const outstanding = getOutstanding(invoice);

    // Create the print HTML content
    const printContent = createPrintContent(invoice, logoUrl, totalPaid, outstanding, itemsMode);

    // Write content to the new window
    printWindow.document.write(printContent);
    printWindow.document.close();

    // Wait for content to load, then trigger print
    printWindow.onload = () => {
      setTimeout(() => {
        printWindow.print();
        printWindow.close();
      }, 250);
    };
  };

  const handleLogoClick = () => {
    if (window.innerWidth <= 768) { // Mobile devices
      setShowLogoModal(true);
    } else { // Desktop
      const logoUrl = invoice.companyLogo.startsWith('data:') ? invoice.companyLogo : `${API_BASE_URL}${invoice.companyLogo}`;
      window.open(logoUrl, '_blank');
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'paid': return 'text-green-600 bg-green-100';
      case 'sent': return 'text-blue-600 bg-blue-100';
      case 'draft': return 'text-gray-600 bg-gray-100';
      case 'overdue': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'paid': return 'Dibayar';
      case 'sent': return 'Dihantar';
      case 'draft': return 'Draf';
      case 'overdue': return 'Lewat Tempoh';
      default: return status;
    }
  };

  const renderAddress = (addr) => {
    if (!addr) return null;
    // Split by comma or newline for nicer multi-line display
    const parts = String(addr)
      .split(/\n|,/)
      .map(s => s.trim())
      .filter(Boolean);
    return parts.map((line, i) => (
      <p key={i} className="print:text-xs">{line}</p>
    ));
  };

  if (loading) {
    return (
      <div className="relative w-full bg-gradient-to-br from-primary-50 via-white to-primary-100/60 px-4 py-6 md:py-10">
        <div className="max-w-6xl mx-auto animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/3 mb-6"></div>
          <div className="rounded-2xl bg-white/80 backdrop-blur p-6 shadow-lg ring-1 ring-gray-200">
            <div className="h-64 bg-gray-100 rounded"></div>
          </div>
        </div>
      </div>
    );
  }

  if (!invoice) {
    return (
      <div className="relative w-full bg-gradient-to-br from-primary-50 via-white to-primary-100/60 px-4 py-6 md:py-10">
        <div className="max-w-6xl mx-auto">
          <div className="rounded-2xl bg-white/80 backdrop-blur p-8 shadow-lg ring-1 ring-gray-200 text-center">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Invois tidak dijumpai</h2>
            <button
              onClick={() => navigate('/invoices')}
              className="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-blue-600 rounded-lg hover:bg-blue-700 hover:border-blue-700 transition-colors duration-200"
            >
              Kembali ke Senarai Invois
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="relative w-full bg-gradient-to-br from-primary-50 via-white to-primary-100/60 px-4 py-6 md:py-10">
      {/* Corak latar halus */}
      <div aria-hidden className="pointer-events-none absolute inset-0 -z-10 overflow-hidden">
        <div className="absolute inset-0 opacity-40 [background-image:radial-gradient(#e5e7eb_1px,transparent_1.5px)] [background-size:20px_20px]"></div>
        <div className="absolute -top-24 -right-24 h-80 w-80 rounded-full bg-primary-200/50 blur-3xl"></div>
        <div className="absolute -bottom-24 -left-24 h-80 w-80 rounded-full bg-primary-300/40 blur-3xl"></div>
      </div>
      {/* Print Styles - A4 Standard */}
      <style>
        {`
          @media print {
            @page {
              size: A4;
              margin: 20mm;
            }
            
            body {
              -webkit-print-color-adjust: exact !important;
              print-color-adjust: exact !important;
              font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            }
            
            .print\\:text-xs { font-size: 9px !important; line-height: 1.2 !important; }
            .print\\:text-sm { font-size: 10px !important; line-height: 1.3 !important; }
            .print\\:text-base { font-size: 11px !important; line-height: 1.4 !important; }
            .print\\:text-lg { font-size: 12px !important; line-height: 1.4 !important; }
            .print\\:text-xl { font-size: 14px !important; line-height: 1.4 !important; }
            .print\\:text-2xl { font-size: 16px !important; line-height: 1.3 !important; }
            .print\\:text-3xl { font-size: 18px !important; line-height: 1.2 !important; }
            
            .print\\:p-2 { padding: 6px !important; }
            .print\\:p-3 { padding: 8px !important; }
            .print\\:p-4 { padding: 12px !important; }
            .print\\:p-6 { padding: 16px !important; }
            .print\\:p-8 { padding: 20px !important; }
            
            .print\\:py-1 { padding-top: 3px !important; padding-bottom: 3px !important; }
            .print\\:py-2 { padding-top: 6px !important; padding-bottom: 6px !important; }
            .print\\:py-3 { padding-top: 8px !important; padding-bottom: 8px !important; }
            .print\\:py-4 { padding-top: 12px !important; padding-bottom: 12px !important; }
            
            .print\\:px-2 { padding-left: 6px !important; padding-right: 6px !important; }
            .print\\:px-3 { padding-left: 8px !important; padding-right: 8px !important; }
            .print\\:px-4 { padding-left: 12px !important; padding-right: 12px !important; }
            
            .print\\:mb-1 { margin-bottom: 4px !important; }
            .print\\:mb-2 { margin-bottom: 6px !important; }
            .print\\:mb-3 { margin-bottom: 8px !important; }
            .print\\:mb-4 { margin-bottom: 12px !important; }
            .print\\:mb-6 { margin-bottom: 16px !important; }
            
            .print\\:mt-2 { margin-top: 6px !important; }
            .print\\:mt-4 { margin-top: 12px !important; }
            
            .print\\:h-8 { height: 32px !important; }
            .print\\:h-12 { height: 48px !important; }
            .print\\:h-16 { height: 64px !important; }
            
            .print\\:w-12 { width: 48px !important; }
            .print\\:w-16 { width: 64px !important; }
            .print\\:w-20 { width: 80px !important; }
            .print\\:w-24 { width: 96px !important; }
            .print\\:w-28 { width: 112px !important; }
            .print\\:w-32 { width: 128px !important; }
            .print\\:w-48 { width: 192px !important; }
            .print\\:w-64 { width: 256px !important; }
            
            .print\\:max-w-none { max-width: none !important; }
            .print\\:mx-auto { margin-left: 0 !important; margin-right: 0 !important; }
            
            .print\\:shadow-none { box-shadow: none !important; }
            .print\\:border { border: 1px solid #e5e7eb !important; }
            .print\\:border-2 { border: 2px solid #e5e7eb !important; }
            
            .print\\:bg-white { background-color: white !important; }
            .print\\:text-gray-900 { color: #111827 !important; }
            .print\\:text-gray-700 { color: #374151 !important; }
            .print\\:text-gray-600 { color: #4b5563 !important; }
            .print\\:text-gray-500 { color: #6b7280 !important; }
            
            .print\\:font-semibold { font-weight: 600 !important; }
            .print\\:font-bold { font-weight: 700 !important; }
            
            .print\\:rounded { border-radius: 4px !important; }
            .print\\:rounded-lg { border-radius: 8px !important; }
            
            .print\\:hidden { display: none !important; }
            .print\\:block { display: block !important; }
            .print\\:flex { display: flex !important; }
            .print\\:grid { display: grid !important; }
            
            .print\\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)) !important; }
            .print\\:gap-4 { gap: 12px !important; }
            .print\\:gap-6 { gap: 16px !important; }
            .print\\:gap-8 { gap: 20px !important; }
            
            .print\\:space-y-1 > * + * { margin-top: 4px !important; }
            .print\\:space-y-2 > * + * { margin-top: 6px !important; }
            .print\\:space-y-3 > * + * { margin-top: 8px !important; }
            
            .print\\:leading-tight { line-height: 1.2 !important; }
            .print\\:leading-normal { line-height: 1.4 !important; }
            
            .print\\:whitespace-pre-wrap { white-space: pre-wrap !important; }
            .print\\:break-words { word-break: break-word !important; }
            
            /* Page break controls for print */
            .print\\:page-break-before { page-break-before: always !important; }
            .print\\:page-break-after { page-break-after: always !important; }
            .print\\:page-break-inside-avoid { page-break-inside: avoid !important; }
            .print\\:page-break-inside-auto { page-break-inside: auto !important; }
            
            /* Table page break handling */
            .print\\:table-break-inside-avoid { page-break-inside: avoid !important; }
            .print\\:table-break-inside-auto { page-break-inside: auto !important; }
            
            /* Row page break handling */
            .print\\:row-break-inside-avoid { page-break-inside: avoid !important; }
            .print\\:row-break-inside-auto { page-break-inside: auto !important; }
            
            /* Specific table styling for print */
            table { 
              page-break-inside: auto !important; 
              border-collapse: collapse !important;
              width: 100% !important;
            }
            
            /* Allow table to break across pages */
            .invoice-items-table {
              page-break-inside: auto !important;
            }
            
            /* Table headers should repeat on each page */
            thead { 
              display: table-header-group !important; 
            }
            
            thead tr {
              page-break-inside: avoid !important;
              page-break-after: avoid !important;
            }
            
            /* Table body can break across pages */
            tbody {
              page-break-inside: auto !important;
            }
            
            /* Individual rows can break across pages */
            tbody tr {
              page-break-inside: auto !important;
              page-break-after: auto !important;
            }
            
            tfoot { 
              display: table-footer-group !important; 
            }
            
            /* Special handling for invoice items table */
            .invoice-items-table {
              page-break-inside: auto !important;
              break-inside: auto !important;
            }
            
            .invoice-items-table tbody {
              page-break-inside: auto !important;
              break-inside: auto !important;
            }
            
            .invoice-items-table tbody tr {
              page-break-inside: auto !important;
              page-break-after: auto !important;
              break-inside: auto !important;
              break-after: auto !important;
            }
            
            .invoice-items-table thead {
              display: table-header-group !important;
            }
            
            .invoice-items-table thead tr {
              page-break-inside: avoid !important;
              page-break-after: avoid !important;
              break-inside: avoid !important;
              break-after: avoid !important;
            }
            
            /* Prevent breaking inside table cells */
            td, th {
              page-break-inside: avoid !important;
              break-inside: avoid !important;
            }
            
            /* Force table to break when needed */
            .invoice-items-container {
              page-break-inside: auto !important;
              break-inside: auto !important;
            }
            
            /* Ensure table can overflow to next page */
            .invoice-items-table,
            .invoice-items-table tbody,
            .invoice-items-table tbody tr {
              page-break-inside: auto !important;
              break-inside: auto !important;
            }
            
            /* Modern CSS for page breaks */
            @supports (break-inside: auto) {
              .invoice-items-table {
                break-inside: auto !important;
              }
              
              .invoice-items-table tbody {
                break-inside: auto !important;
              }
              
              .invoice-items-table tbody tr {
                break-inside: auto !important;
              }
            }
            
            /* Force table to break across pages */
            .invoice-items-table {
              page-break-inside: auto !important;
              break-inside: auto !important;
              -webkit-column-break-inside: auto !important;
              -moz-column-break-inside: auto !important;
            }
            
            .invoice-items-table tbody {
              page-break-inside: auto !important;
              break-inside: auto !important;
              -webkit-column-break-inside: auto !important;
              -moz-column-break-inside: auto !important;
            }
            
            .invoice-items-table tbody tr {
              page-break-inside: auto !important;
              break-inside: auto !important;
              -webkit-column-break-inside: auto !important;
              -moz-column-break-inside: auto !important;
            }
            
            /* Prevent breaking important sections */
            .invoice-header {
              page-break-inside: avoid !important;
              page-break-after: avoid !important;
            }
            
            .invoice-totals {
              page-break-inside: avoid !important;
              page-break-before: avoid !important;
            }
            
            .invoice-payment-info {
              page-break-inside: avoid !important;
            }
            
            .invoice-terms {
              page-break-inside: avoid !important;
            }
            
            .invoice-footer {
              page-break-inside: avoid !important;
            }
            
            .invoice-company-client-info {
              page-break-inside: avoid !important;
            }
            
            /* Override any conflicting styles */
            * {
              -webkit-print-color-adjust: exact !important;
              print-color-adjust: exact !important;
            }
            
            /* Remove all scroll bars and height restrictions */
            body, html, div, section, article {
              overflow: visible !important;
              max-height: none !important;
              height: auto !important;
            }
            
            /* Specifically target invoice document */
            .invoice-document,
            .invoice-document * {
              overflow: visible !important;
              max-height: none !important;
              height: auto !important;
            }
            
            /* Ensure table can break across pages */
            table, tbody, tr {
              page-break-inside: auto !important;
              break-inside: auto !important;
            }
            
            /* Force table to break when needed */
            .invoice-items-table {
              page-break-inside: auto !important;
              break-inside: auto !important;
              overflow: visible !important;
            }
            
            .invoice-items-table tbody {
              page-break-inside: auto !important;
              break-inside: auto !important;
              overflow: visible !important;
            }
            
            .invoice-items-table tbody tr {
              page-break-inside: auto !important;
              break-inside: auto !important;
              overflow: visible !important;
            }
            
            /* Remove scroll and allow table to break */
            .invoice-items-container {
              overflow: visible !important;
              max-height: none !important;
              height: auto !important;
            }
            
            .invoice-items-container > div {
              overflow: visible !important;
              max-height: none !important;
              height: auto !important;
            }
            
            /* Additional CSS for better page breaking */
            .invoice-items-table {
              table-layout: auto !important;
              width: 100% !important;
            }
            
            .invoice-items-table td,
            .invoice-items-table th {
              page-break-inside: avoid !important;
              break-inside: avoid !important;
              word-wrap: break-word !important;
              overflow-wrap: break-word !important;
            }
            
            /* Ensure table headers repeat on each page */
            .invoice-items-table thead {
              display: table-header-group !important;
            }
            
            .invoice-items-table thead tr {
              page-break-inside: avoid !important;
              break-inside: avoid !important;
            }
            
            /* Force table to break when needed */
            .invoice-items-table tbody tr:nth-child(odd) {
              page-break-inside: auto !important;
              break-inside: auto !important;
            }
            
            .invoice-items-table tbody tr:nth-child(even) {
              page-break-inside: auto !important;
              break-inside: auto !important;
            }
            
            /* Remove scroll bars completely */
            .invoice-items-container {
              overflow: visible !important;
              max-height: none !important;
              height: auto !important;
            }
            
            .invoice-items-container > div {
              overflow: visible !important;
              max-height: none !important;
              height: auto !important;
            }
            
            /* Force table to be fully visible */
            .invoice-items-table {
              overflow: visible !important;
              max-height: none !important;
              height: auto !important;
            }
            
            .invoice-items-table tbody {
              overflow: visible !important;
              max-height: none !important;
              height: auto !important;
            }
          }
        `}
      </style>
      
      <div className="max-w-6xl mx-auto">
        {/* Print Controls - Hidden when printing */}
        <div className="mb-8 print:hidden">
        <div className="rounded-2xl bg-white/80 backdrop-blur p-6 shadow-lg ring-1 ring-gray-200">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            <div className="flex items-center gap-3">
              <button
                onClick={() => navigate('/invoices')}
                className="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 bg-white border border-blue-200 rounded-lg hover:bg-blue-50 hover:border-blue-300 transition-colors duration-200"
              >
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
                Kembali
              </button>
              <div className="h-6 w-px bg-gray-300"></div>
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <div className="w-2 h-2 bg-gray-400 rounded-full"></div>
                <span>Invois {invoice.status === 'paid' ? 'Dibayar' : invoice.status === 'sent' ? 'Dihantar' : invoice.status === 'draft' ? 'Draf' : 'Lewat Tempoh'}</span>
              </div>
            </div>
            
            <div className="flex flex-col sm:flex-row gap-3">
              <button
                onClick={() => navigate(`/invoices/edit/${id}`)}
                className="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 bg-white border border-blue-200 rounded-lg hover:bg-blue-50 hover:border-blue-300 transition-colors duration-200"
              >
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                </svg>
                Edit Invois
              </button>
              <button
                onClick={handlePrint}
                className="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-blue-600 rounded-lg hover:bg-blue-700 hover:border-blue-700 transition-colors duration-200"
              >
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
                </svg>
                Cetak
              </button>
            </div>
          </div>
          
          {/* Logo Info - Only show if no logo */}
          {!invoice.companyLogo && (
            <div className="mt-4 p-4 bg-gray-50 border border-gray-200 rounded-lg">
              <div className="flex items-start gap-3">
                <div className="flex-shrink-0">
                <div className="inline-flex h-9 w-9 items-center justify-center rounded-lg bg-primary-50 text-primary-600 ring-1 ring-inset ring-primary-100">
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                </div>
                <div>
                  <h4 className="text-sm font-semibold text-gray-900 mb-1">Tambahkan Logo Syarikat</h4>
                  <p className="text-sm text-gray-700">
                    Logo syarikat akan menjadikan invois anda kelihatan lebih profesional. Klik "Edit Invois" untuk menambah logo.
                  </p>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

        {/* Invoice Document */}
        <div className="bg-white shadow-lg rounded-2xl overflow-hidden ring-1 ring-gray-200 print:shadow-none print:max-w-none print:rounded-none invoice-document">
        {/* Header */}
        <div className="bg-white border-b-2 border-gray-300 p-8 print:p-4 invoice-header">
          <div className="flex justify-between items-start">
            <div className="flex items-start space-x-6 print:space-x-3">
              {/* Company Logo */}
              <div className="flex-shrink-0">
                <div className="relative group">
                  <img 
                    src={(invoice.companyLogo || settings.companyLogo)?.startsWith('data:') ? (invoice.companyLogo || settings.companyLogo) : `${API_BASE_URL}${invoice.companyLogo || settings.companyLogo}`}
                    alt="Logo Syarikat" 
                     className={`h-12 w-auto max-w-24 object-contain company-logo cursor-pointer hover:opacity-80 transition-opacity print:h-8 print:cursor-default ${(invoice.companyLogo || (settings.companyLogo && settings.showCompanyLogo)) ? 'block' : 'hidden'}`}
                    onError={(e) => {
                      e.target.style.display = 'none';
                      const placeholder = e.target.parentElement?.querySelector('.logo-placeholder');
                      if (placeholder) {
                        placeholder.style.display = 'flex';
                      }
                    }}
                    onClick={handleLogoClick}
                    title="Klik untuk lihat logo dalam saiz penuh"
                  />
                  {/* Fallback placeholder when no logo */}
                  <div 
                     className={`h-12 w-24 bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center text-gray-500 text-xs text-center logo-placeholder print:h-8 print:w-20 print:text-xs ${(invoice.companyLogo || (settings.companyLogo && settings.showCompanyLogo)) ? 'hidden' : 'flex'}`}
                  >
                    Logo Syarikat
                  </div>
                </div>
              </div>
              
              {/* Invoice Title and Details */}
              <div>
                <h1 className="text-3xl font-bold text-gray-900 mb-2 print:text-xl print:mb-2">
                  {invoice.documentType === 'quote' ? 'SEBUT HARGA' : 'INVOIS'}
                </h1>
                <div className="text-gray-600 print:text-xs">
                  <p className="font-semibold print:text-xs">
                    No. {invoice.documentType === 'quote' ? 'Sebut Harga' : 'Invois'}: {invoice.invoiceNumber}
                  </p>
                  <p className="print:text-xs">Tarikh Terbit: {formatDate(invoice.issueDate)}</p>
                  <p className="print:text-xs">Tarikh Jatuh Tempo: {formatDate(invoice.dueDate)}</p>
                </div>
              </div>
            </div>
            
            <div className="text-right">
              <div className="inline-flex flex-col items-end rounded-lg border border-gray-200 bg-gray-50 px-4 py-3 print:border print:shadow-none">
                <span className="text-xs text-gray-500 print:text-xs">
                  No. {invoice.documentType === 'quote' ? 'Sebut Harga' : 'Invois'}
                </span>
                <span className="text-lg font-bold text-gray-900 print:text-sm">{invoice.invoiceNumber}</span>
                <span className={`mt-2 inline-flex px-3 py-1 text-xs font-semibold rounded-full ${getStatusColor(invoice.status)} print:text-xs`}>
                  {getStatusText(invoice.status)}
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Company and Client Info */}
        <div className="p-8 border-b border-gray-200 print:p-4 invoice-company-client-info">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8 print:gap-4">
            <div className="bg-gray-50 rounded-lg p-6 print:bg-white print:p-0 print:rounded-none">
              <div className="flex items-center gap-3 mb-4 print:mb-2">
                <div className="inline-flex h-9 w-9 items-center justify-center rounded-lg bg-primary-50 text-primary-600 ring-1 ring-inset ring-primary-100 print:bg-gray-100 print:ring-0">
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                  </svg>
                </div>
                <h3 className="text-lg font-semibold text-gray-900 print:text-sm print:mb-2">Dari:</h3>
              </div>
              <div className="text-gray-700 print:text-xs space-y-1">
                <p className="font-semibold text-lg print:text-xs print:font-semibold">{invoice.senderCompanyName}</p>
                <div className="text-gray-600 print:text-xs">
                  {renderAddress(invoice.senderCompanyAddress)}
                </div>
                <div className="flex items-center gap-2 mt-2 print:mt-1">
                  <svg className="w-4 h-4 text-gray-400 print:hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                  </svg>
                  <p className="print:text-xs">{invoice.senderCompanyEmail}</p>
                </div>
                <div className="flex items-center gap-2 print:hidden">
                  <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                  </svg>
                  <p className="print:text-xs">{invoice.senderCompanyPhone || '+60 12-345 6789'}</p>
                </div>
                {invoice.senderCompanyRegistrationNo && (
                  <div className="flex items-center gap-2 print:hidden">
                    <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    <p className="print:text-xs">No. Pendaftaran: {invoice.senderCompanyRegistrationNo}</p>
                  </div>
                )}
                <p className="print:text-xs print:block hidden">{invoice.senderCompanyPhone || '+60 12-345 6789'}</p>
                {invoice.senderCompanyRegistrationNo && (
                  <p className="print:text-xs print:block hidden">No. Pendaftaran: {invoice.senderCompanyRegistrationNo}</p>
                )}
              </div>
            </div>
            
            <div className="bg-gray-50 rounded-lg p-6 print:bg-white print:p-0 print:rounded-none">
              <div className="flex items-center gap-3 mb-4 print:mb-2">
                <div className="inline-flex h-9 w-9 items-center justify-center rounded-lg bg-primary-50 text-primary-600 ring-1 ring-inset ring-primary-100 print:bg-gray-100 print:ring-0">
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                </div>
                <h3 className="text-lg font-semibold text-gray-900 print:text-sm print:mb-2">Kepada:</h3>
              </div>
              <div className="text-gray-700 print:text-xs space-y-1">
                {invoice.clientCompany && (
                  <p className="font-semibold text-lg print:text-xs print:font-semibold">{invoice.clientCompany}</p>
                )}
                <p className="font-medium text-base print:text-xs print:font-medium">{invoice.clientName}</p>
                <div className="flex items-center gap-2 mt-2 print:mt-1">
                  <svg className="w-4 h-4 text-gray-400 print:hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                  </svg>
                  <p className="print:text-xs">{invoice.clientEmail}</p>
                </div>
                <div className="flex items-start gap-2 print:hidden">
                  <svg className="w-4 h-4 text-gray-400 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  <div className="print:text-xs">{renderAddress(invoice.clientAddress || 'Alamat Pelanggan')}</div>
                </div>
                <div className="flex items-center gap-2 print:hidden">
                  <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                  </svg>
                  <p className="print:text-xs">{invoice.clientPhone || 'Nombor Telefon'}</p>
                </div>
                <div className="print:text-xs print:block hidden">{renderAddress(invoice.clientAddress || 'Alamat Pelanggan')}</div>
                <p className="print:text-xs print:block hidden">{invoice.clientPhone || 'Nombor Telefon'}</p>
              </div>
            </div>
          </div>
        </div>

        {/* Items Table */}
        <div className="p-8 print:p-4 invoice-items-container">
          <div className="mb-4 print:mb-2">
            <h3 className="text-lg font-semibold text-gray-900 print:text-sm print:mb-2">{invoice.documentType === 'quote' ? 'Item Sebut Harga' : 'Item Invois'}</h3>
          </div>
          
          {itemsMode === 'structured' ? (
            <div className="overflow-visible rounded-xl ring-1 ring-gray-200 print:border print:rounded-none print:overflow-visible">
              <table className="w-full border-collapse invoice-items-table">
                <thead>
                  <tr className="bg-primary-50 border-b border-gray-200 print:bg-gray-100">
                    <th className="text-left py-4 px-6 font-semibold text-gray-900 print:py-2 print:px-2 print:text-xs">Item</th>
                    <th className="text-center py-4 px-6 font-semibold text-gray-900 print:py-2 print:px-2 print:text-xs w-20 print:w-16">Qty</th>
                    <th className="text-right py-4 px-6 font-semibold text-gray-900 print:py-2 print:px-2 print:text-xs w-28 print:w-24">Unit (RM)</th>
                    <th className="text-right py-4 px-6 font-semibold text-gray-900 print:py-2 print:px-2 print:text-xs w-32 print:w-28">Jumlah (RM)</th>
                  </tr>
                </thead>
                <tbody>
                  {invoice.items && invoice.items.map((item, index) => (
                    <tr key={index} className={`border-b border-gray-100 hover:bg-gray-50 print:hover:bg-transparent ${index % 2 === 0 ? 'bg-white' : 'bg-gray-50/50'} print:bg-white`}>
                      <td className="py-4 px-6 text-gray-700 print:py-2 print:px-2 print:text-xs">
                        <div className="flex items-center gap-3">
                          <span className="inline-flex items-center justify-center w-6 h-6 rounded-full bg-gray-100 text-gray-700 text-xs font-semibold print:hidden">
                            {index + 1}
                          </span>
                          <span className="font-medium print:font-normal">{item.description}</span>
                        </div>
                      </td>
                      <td className="py-4 px-6 text-center text-gray-700 print:py-2 print:px-2 print:text-xs font-medium print:font-normal">{item.quantity}</td>
                      <td className="py-4 px-6 text-right text-gray-700 print:py-2 print:px-2 print:text-xs font-medium print:font-normal">{formatCurrency(item.unitPrice)}</td>
                      <td className="py-4 px-6 text-right text-gray-900 font-semibold print:py-2 print:px-2 print:text-xs print:font-semibold">
                        {formatCurrency(item.quantity * item.unitPrice)}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <div className="rounded-xl ring-1 ring-gray-200 print:border print:rounded-none bg-white print:bg-transparent">
              <div className="p-6 print:p-4">
                <div className="mb-4 pb-3 border-b border-gray-200 print:border-0">
                  <h4 className="text-sm font-semibold text-gray-900 flex items-center gap-2 print:text-xs">
                    <svg className="w-3 h-3 text-gray-600 print:hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
                    </svg>
                    Senarai Item
                  </h4>
                </div>
                <div className="text-gray-700 whitespace-pre-wrap text-sm leading-relaxed print:text-xs">
                  {invoice.freeformItems}
                </div>
                <div className="mt-4 pt-4 border-t border-gray-200 print:border-0">
                  <div className="text-xs text-gray-500 print:text-xs flex items-center gap-1">
                    <svg className="w-2.5 h-2.5 print:hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    Item ini dibuat dalam mod teks bebas
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Totals */}
        <div className="p-8 border-t border-gray-200 print:p-4 invoice-totals">
          <div className="flex justify-end">
            <div className="w-80 print:w-64">
              <div className="bg-gray-50 rounded-lg p-6 print:bg-white print:p-0 print:rounded-none">
                <div className="space-y-3 print:space-y-1">
                  <div className="flex justify-between text-gray-700 print:text-xs">
                    <span className="font-medium print:font-normal">Jumlah Subtotal:</span>
                    <span className="font-semibold print:font-semibold">{formatCurrency(getSubtotal(invoice))}</span>
                  </div>
                  {getDiscountAmount(invoice) > 0 && (
                    <div className="flex justify-between text-red-600 print:text-xs">
                      <span className="font-medium print:font-normal">Diskaun:</span>
                      <span className="font-semibold print:font-semibold">-{formatCurrency(getDiscountAmount(invoice))}</span>
                    </div>
                  )}
                  {getTaxAmount(invoice) > 0 && (
                    <div className="flex justify-between text-gray-700 print:text-xs">
                      <span className="font-medium print:font-normal">Cukai:</span>
                      <span className="font-semibold print:font-semibold">{formatCurrency(getTaxAmount(invoice))}</span>
                    </div>
                  )}
                  <div className="border-t border-gray-300 pt-3 print:pt-1">
                    <div className="flex justify-between text-xl font-bold text-gray-900 print:text-sm print:font-bold">
                      <span>Jumlah Keseluruhan:</span>
                      <span className="text-gray-900 print:text-gray-900">{formatCurrency(getTotal(invoice))}</span>
                    </div>
                  </div>
                  {invoice.documentType !== 'quote' && (
                    <div className="mt-3 space-y-2">
                      <div className="flex justify-between text-gray-700 print:text-xs">
                        <span className="font-medium print:font-normal">Bayaran Diterima:</span>
                        <span className="font-semibold text-green-700 print:font-semibold">{formatCurrency(getTotalPaid(invoice))}</span>
                      </div>
                      {getOutstanding(invoice) > 0 && (
                        <div className="flex justify-between text-gray-700 print:text-xs">
                          <span className="font-medium print:font-normal">Baki Tertunggak:</span>
                          <span className="font-semibold text-amber-700 print:font-semibold">
                            {formatCurrency(getOutstanding(invoice))}
                          </span>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Payment Information - hidden for quotes even if legacy data exists */}
        {invoice.documentType !== 'quote' && (invoice.senderBankName || invoice.senderBankAccount || invoice.paymentQRCode) && (
          <div className="p-8 border-t border-gray-200 print:p-4 invoice-payment-info">
            <div className="bg-gray-50 rounded-lg p-6 print:bg-white print:p-0 print:rounded-none">
              <div className="flex items-center gap-3 mb-4 print:mb-2">
                <div className="inline-flex h-9 w-9 items-center justify-center rounded-lg bg-primary-50 text-primary-600 ring-1 ring-inset ring-primary-100 print:bg-gray-100 print:ring-0">
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                  </svg>
                </div>
                <h3 className="text-lg font-semibold text-gray-900 print:text-sm print:mb-2">Maklumat Pembayaran:</h3>
              </div>
              <div className="text-gray-700 print:text-xs space-y-3">
                {invoice.senderBankName && (
                  <div className="flex items-center gap-2">
                    <svg className="w-4 h-4 text-gray-400 print:hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                    </svg>
                    <p><span className="font-medium print:font-normal">Bank:</span> {invoice.senderBankName}</p>
                  </div>
                )}
                {invoice.senderBankAccount && (
                  <div className="flex items-center gap-2">
                    <svg className="w-4 h-4 text-gray-400 print:hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 20l4-16m2 16l4-16M6 9h14M4 15h14" />
                    </svg>
                    <p><span className="font-medium print:font-normal">Akaun:</span> {invoice.senderBankAccount}</p>
                  </div>
                )}
                {invoice.paymentQRCode && (
                  <div className="flex items-start gap-3">
                    <svg className="w-4 h-4 text-gray-400 print:hidden mt-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 7h6m2 0h.01M7 7h.01M7 17h.01M17 17h.01M7 12h.01M12 12h.01M17 12h.01M12 17h.01" />
                    </svg>
                    <div>
                      <p className="font-medium print:font-normal mb-2">Kod QR Pembayaran:</p>
                      <img
                        src={`${API_BASE_URL}${invoice.paymentQRCode}`}
                        alt="Kod QR Pembayaran"
                        className="h-28 w-28 object-contain rounded-lg bg-white p-2 ring-1 ring-gray-200 print:h-20 print:w-20"
                      />
                    </div>
                  </div>
                )}
                <p className="print:text-xs print:block hidden">{invoice.senderBankName && `Bank: ${invoice.senderBankName}`}</p>
                <p className="print:text-xs print:block hidden">{invoice.senderBankAccount && `Akaun: ${invoice.senderBankAccount}`}</p>
              </div>
            </div>
          </div>
        )}

        {/* Payment Records - Detailed payment history */}
        {invoice.documentType !== 'quote' && invoice.payments && invoice.payments.length > 0 && (
          <div className="p-8 border-t border-gray-200 print:p-4">
            <div className="bg-gray-50 rounded-lg p-6 print:bg-white print:p-0 print:rounded-none">
              <div className="flex items-center gap-3 mb-4 print:mb-2">
                <div className="inline-flex h-9 w-9 items-center justify-center rounded-lg bg-primary-50 text-primary-600 ring-1 ring-inset ring-primary-100 print:bg-gray-100 print:ring-0">
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
                  </svg>
                </div>
                <h3 className="text-lg font-semibold text-gray-900 print:text-sm print:mb-2">Rekod Pembayaran:</h3>
              </div>
              
              {/* Payment Records Table */}
              <div className="overflow-hidden rounded-lg ring-1 ring-gray-200 print:border print:rounded-none">
                <table className="w-full border-collapse">
                  <thead>
                    <tr className="bg-gray-100 border-b border-gray-200 print:bg-gray-50">
                      <th className="text-left py-3 px-4 font-semibold text-gray-900 print:py-2 print:px-2 print:text-xs">Tarikh</th>
                      <th className="text-left py-3 px-4 font-semibold text-gray-900 print:py-2 print:px-2 print:text-xs">Jumlah</th>
                      <th className="text-left py-3 px-4 font-semibold text-gray-900 print:py-2 print:px-2 print:text-xs">Catatan</th>
                      <th className="text-right py-3 px-4 font-semibold text-gray-900 print:py-2 print:px-2 print:text-xs">Status</th>
                    </tr>
                  </thead>
                  <tbody>
                    {invoice.payments.map((payment, index) => (
                      <tr key={payment._id || payment.id || index} className={`border-b border-gray-100 last:border-b-0 print:border-0 ${index % 2 === 0 ? 'bg-white' : 'bg-gray-50/50'} print:bg-white`}>
                        <td className="py-3 px-4 text-gray-700 print:py-2 print:px-2 print:text-xs">
                          <div className="flex flex-col">
                            <span className="font-medium print:font-normal">
                              {payment.date ? formatDate(payment.date) : 'Tarikh tidak tersedia'}
                            </span>
                            {payment.date && (
                              <span className="text-xs text-gray-500 print:text-xs">
                                {new Date(payment.date).toLocaleDateString('ms-MY', { 
                                  weekday: 'short',
                                  year: 'numeric',
                                  month: 'short',
                                  day: 'numeric'
                                })}
                              </span>
                            )}
                          </div>
                        </td>
                        <td className="py-3 px-4 text-gray-900 font-semibold print:py-2 print:px-2 print:text-xs print:font-semibold">
                          {formatCurrency(payment.amount)}
                        </td>
                        <td className="py-3 px-4 text-gray-600 print:py-2 print:px-2 print:text-xs">
                          {payment.note || '-'}
                        </td>
                        <td className="py-3 px-4 text-right print:py-2 print:px-2 print:text-xs">
                          <span className="inline-flex items-center px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800 print:bg-transparent print:text-green-800">
                            <svg className="w-3 h-3 mr-1 print:hidden" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                            </svg>
                            Diterima
                          </span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              
              {/* Payment Summary */}
              <div className="mt-6 pt-4 border-t border-gray-300 print:border-0 print:pt-0">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 print:grid-cols-1">
                  <div className="bg-white rounded-lg p-4 border border-gray-200 print:bg-transparent print:border-0 print:p-0">
                    <div className="text-sm text-gray-600 print:text-xs">Jumlah Pembayaran</div>
                    <div className="text-lg font-bold text-green-600 print:text-sm print:font-bold">
                      {formatCurrency(getTotalPaid(invoice))}
                    </div>
                  </div>
                  
                  <div className="bg-white rounded-lg p-4 border border-gray-200 print:bg-transparent print:border-0 print:p-0">
                    <div className="text-sm text-gray-600 print:text-xs">Jumlah Invois</div>
                    <div className="text-lg font-bold text-gray-900 print:text-sm print:font-bold">
                      {formatCurrency(getTotal(invoice))}
                    </div>
                  </div>
                  
                  {getOutstanding(invoice) > 0 && (
                    <div className="bg-white rounded-lg p-4 border border-gray-200 print:bg-transparent print:border-0 print:p-0">
                      <div className="text-sm text-gray-600 print:text-xs">Baki Tertunggak</div>
                      <div className="text-lg font-bold text-red-600 print:text-sm print:font-bold">
                        {formatCurrency(getOutstanding(invoice))}
                      </div>
                    </div>
                  )}
                </div>
                
                {getOutstanding(invoice) === 0 && (
                  <div className="mt-4 p-3 bg-green-50 border border-green-200 rounded-lg print:bg-transparent print:border-0 print:p-0">
                    <div className="flex items-center text-green-800 print:text-green-800">
                      <svg className="w-4 h-4 mr-2 print:hidden" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                      </svg>
                      <span className="text-sm font-medium print:text-xs">Pembayaran telah lengkap</span>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

         {/* Notes */}
        {invoice.notes && (
          <div className="p-8 border-t border-gray-200 print:p-4">
            <div className="bg-gray-50 rounded-lg p-6 print:bg-white print:p-0 print:rounded-none">
              <div className="flex items-center gap-3 mb-4 print:mb-2">
                <div className="inline-flex h-9 w-9 items-center justify-center rounded-lg bg-primary-50 text-primary-600 ring-1 ring-inset ring-primary-100 print:bg-gray-100 print:ring-0">
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
                  </svg>
                </div>
                <h3 className="text-lg font-semibold text-gray-900 print:text-sm print:mb-2">Nota:</h3>
              </div>
              <p className="text-gray-700 whitespace-pre-wrap print:text-xs bg-white rounded-lg p-4 print:bg-transparent print:p-0 print:rounded-none">{invoice.notes}</p>
            </div>
          </div>
        )}

        {/* Terms and Conditions */}
        {invoice.termsAndConditions && (
          <div className="p-8 border-t border-gray-200 print:p-4 invoice-terms">
            <div className="bg-gray-50 rounded-lg p-6 print:bg-white print:p-0 print:rounded-none">
              <div className="flex items-center gap-3 mb-4 print:mb-2">
                <div className="inline-flex h-9 w-9 items-center justify-center rounded-lg bg-primary-50 text-primary-600 ring-1 ring-inset ring-primary-100 print:bg-gray-100 print:ring-0">
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                  </svg>
                </div>
                <h3 className="text-lg font-semibold text-gray-900 print:text-sm print:mb-2">Terma dan Syarat:</h3>
              </div>
              <div className="text-gray-700 text-sm whitespace-pre-wrap print:text-xs print:leading-tight bg-white rounded-lg p-4 print:bg-transparent print:p-0 print:rounded-none">
                {invoice.termsAndConditions}
              </div>
            </div>
          </div>
        )}

       

        {/* Footer */}
        <div className="p-8 border-t border-gray-200 bg-gray-50 print:bg-white print:p-4 invoice-footer">
          <div className="text-center">
            <div className="flex items-center justify-center gap-2 mb-4 print:mb-2">
              <div className="inline-flex h-9 w-9 items-center justify-center rounded-lg bg-primary-50 text-primary-600 ring-1 ring-inset ring-primary-100 print:bg-gray-100 print:ring-0">
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                </svg>
              </div>
              <h3 className="text-lg font-semibold text-gray-900 print:text-sm print:mb-2">Terima Kasih!</h3>
            </div>
            <div className="text-gray-600 text-sm print:text-xs space-y-2">
              <p className="font-medium print:font-normal">Terima kasih atas perniagaan anda!</p>
              <p>
                Sila bayar dalam tempoh <span className="font-semibold text-gray-900 print:text-gray-900">{invoice.dueDate ? 
                  `${Math.ceil((new Date(invoice.dueDate) - new Date(invoice.issueDate)) / (1000 * 60 * 60 * 24))} hari` : 
                  '30 hari'}</span> dari tarikh invois ini
              </p>
            </div>
          </div>
        </div>
        </div>
      </div>

      {/* Logo Modal for Mobile */}
      {showLogoModal && invoice?.companyLogo && (
        <div 
          className="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50 print:hidden p-4"
          onClick={() => setShowLogoModal(false)}
        >
          <div 
            className="bg-white rounded-2xl shadow-2xl max-w-md w-full mx-4 overflow-hidden"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="flex justify-between items-center p-6 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">Logo Syarikat</h3>
              <button
                onClick={() => setShowLogoModal(false)}
                className="w-8 h-8 rounded-lg bg-white border border-blue-200 hover:bg-blue-50 hover:border-blue-300 flex items-center justify-center text-blue-600 hover:text-blue-700 transition-colors duration-200"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div className="p-6">
              <img
                src={invoice.companyLogo.startsWith('data:') ? invoice.companyLogo : `${API_BASE_URL}${invoice.companyLogo}`}
                alt="Logo Syarikat"
                className="w-full h-auto max-h-80 object-contain rounded-lg bg-gray-50 p-4"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default InvoiceView;
